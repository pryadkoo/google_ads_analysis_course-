# -*- coding: utf-8 -*-
"""GoogleAds_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I6CXovO58xBH--4V52yp-c07emAYOuoR
"""

#исмопрт пандас
import pandas as pd
import numpy as np
from IPython.display import display

df = pd.read_csv('111.csv')

#переименовал столб потрачено
df = df.rename(columns={'Cost': 'Cost,$'})
#в столбе потрачено удалил $ и преобразовал в числа
df['Cost,$'] = df['Cost,$'].astype(str).str.replace('$', '', regex=False)
df['Cost,$'] = pd.to_numeric(df['Cost,$'], errors='coerce')
#переименовал столб продаж и удалил $ и преобразовал в числа
df = df.rename(columns={'Sale_Amount': 'Sale_Amount,$'})
df['Sale_Amount,$'] = df['Sale_Amount,$'].astype(str).str.replace('$', '', regex=False)
df['Sale_Amount,$'] = pd.to_numeric(df['Sale_Amount,$'], errors='coerce')

#удаление строк без ключевых показателей
df = df.dropna(subset=['Clicks', 'Cost,$', 'Impressions', 'Conversions', 'Sale_Amount,$', 'Keyword'])

#преобразование значений столбца устройств в нижний регситр
def normalize_case(df, columns):
    for col in columns:
        df[col] = df[col].str.lower()
    return df

df = normalize_case(df, ['Device'])

#заменяю все варианты написания локаций на один правильный
df['Location'] = df['Location'].replace(['hydrabad', 'HYDERABAD', 'hyderabad','Hyderbad', 'hydrebad' ], 'Rostow-am-Don')

#заменяю все варианты написания компаний на один правильный
df['Campaign_Name'] = df['Campaign_Name'].replace(['DataAnalyticsCourse', 'Data Anlytics Corse', 'Data Analytcis Course', 'Data Analytics Corse'], 'Corse')

#пересчет процента конверсий, бо была хуйня какая то
df['Conversion Rate'] = (df['Conversions'] / df['Clicks']) * 100

#все даты в единный формат
#Создаем копию столбца, чтобы не изменять исходные данные напрямую
df['Ad_Date_Cleaned'] = df['Ad_Date']

# 1. Первая попытка: преобразуем стандартные форматы (YYYY-MM-DD)
# Pandas попытается распознать их автоматически
df['Ad_Date_Cleaned'] = pd.to_datetime(df['Ad_Date_Cleaned'], errors='coerce')
# 2. Вторая попытка: находим все оставшиеся NaT
# Это те даты, которые не распознались на первом шаге,
# и пытаемся преобразовать их в формате DD-MM-YYYY
mask = df['Ad_Date_Cleaned'].isnull()
df.loc[mask, 'Ad_Date_Cleaned'] = pd.to_datetime(df.loc[mask, 'Ad_Date'], format='%d-%m-%Y', errors='coerce')
# 3. Третья попытка: находим последние NaT
# Это даты, которые не распознались ни на первом, ни на втором шаге.
# Пытаемся преобразовать их в формате YYYY/MM/DD
mask = df['Ad_Date_Cleaned'].isnull()
df.loc[mask, 'Ad_Date_Cleaned'] = pd.to_datetime(df.loc[mask, 'Ad_Date'], format='%Y/%m/%d', errors='coerce')
# Теперь, когда все даты очищены, заменяем старый столбец новым
df['Ad_Date'] = df['Ad_Date_Cleaned']
# Удаляем временный столбец, чтобы не засорять DataFrame
df = df.drop('Ad_Date_Cleaned', axis=1)


df.to_csv('GoogleAds_Data_Cleaned.csv', index=False)
pd.read_csv('GoogleAds_Data_Cleaned.csv')